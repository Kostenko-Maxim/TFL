"""
Задание связано с обратной польской нотацией. Она используется для парсинга арифметических выражений. Ещё её иногда называют постфиксной нотацией. В постфиксной нотации операнды расположены перед знаками операций.

Формат ввода
В единственной строке дано выражение, записанное в обратной польской нотации. Числа и арифметические операции записаны через пробел.
На вход могут подаваться операции: +, -, *, / и числа, по модулю не превосходящие 10000.
Операция / является математическим целочисленным делением с округлением вниз.
Гарантируется, что значение промежуточных выражений в тестовых данных по модулю не больше 50000.

Формат вывода
Выведите единственное число - значение выражения

Примеры
3 4 +
7

12 5 /
2

-1 3 /
-1

10 2 4 * -
2

2 1 + 3 *
9

7 2 + 4 * 2 +
38

"""


class CustomNoItemsException(Exception): # Это пользовательское исключение, которое будет возбуждено, если стек пуст при попытке извлечения элемента.
    def __init__(self):
        pass


class Stack: # Это класс стека. Он имеет методы push для добавления элементов и pop для извлечения последнего элемента из стека.
    def __init__(self):
        self.__data = []

    def push(self, element):
        self.__data.append(element)

    def pop(self):
        if len(self.__data) == 0:
            raise CustomNoItemsException
        else:
            return self.__data.pop()


def calculate(input_string): # Это функция, выполняющая вычисление математического выражения, заданного в обратной польской нотации. Она принимает входную строку и возвращает результат вычисления выражения.
    dictionary = {
        '+': lambda x, y: x + y,
        '-': lambda x, y: y - x,
        '*': lambda x, y: x * y,
        '/': lambda x, y: y // x
    }
    operands = Stack() # объект класса Stack, используемый для хранения операндов в алгоритме
    for val in input_string.split(' '): # разбиение строки
        try:
            operands.push(int(val)) #  Если текущий элемент - число, он добавляется в стек операндов
        except ValueError:
            operands.push(dictionary[val](operands.pop(), operands.pop())) # Если текущий элемент - операция, она применяется к последним двум операндам, извлеченным из стека.

    return operands.pop() # из стека извлекается и возвращается финальный результат вычислений.

print(calculate(input()))