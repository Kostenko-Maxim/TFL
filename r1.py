def rpn(s):
    '''
     основная функция для преобразования инфиксного выражения в
     обратную польскую нотацию (RPN). Она принимает строку s с
     инфиксным выражением, разбивает его на лексемы с помощью
     функции parse, затем выполняет преобразование в RPN, используя
     стеки s2 и r. Функция prty используется для определения приоритета
     операторов. На выходе функция возвращает список с лексемами в RPN.
    :param s:
    :return: r
    '''
    lex = parse(s) #  разбивает входную строку s на лексемы и возвращает список lex.
    s2 = []
    r = []
    oper = ["+", "-", "*", "/", "(", ")"]
    for a in lex: # цикл по всем лексемам в списке lex.
        if a == "(":
            s2 = [a] + s2 # Если это открывающая скобка, то она добавляется в
            # начало списка s2. Это используется для последующей обработки
            # приоритета операций.
        elif a in oper:
            if s2 == []:
                s2 = [a]
            elif a == ")":
                '''
                Происходит извлечение операторов из s2 и добавление их в результат r, 
                пока не встретится открывающая скобка "(".
                '''
                while (True):
                    q = s2[0]
                    s2 = s2[1:]
                    if q == "(":
                        break
                    r += [q]
            elif prty(s2[0]) < prty(a):
                '''Если приоритет текущего оператора (a) больше, чем приоритет 
                оператора на вершине стека s2. Текущий оператор добавляется в начало s2.'''
                s2 = [a] + s2
            else:
                '''Здесь выполняется сравнение приоритетов операторов и 
                перемещение операторов из s2 в r, пока текущий оператор (a) имеет 
                больший приоритет или равный приоритет оператору на вершине 
                стека s2. Затем текущий оператор добавляется в начало s2.'''
                while (True):
                    if s2 == []:
                        break
                    q = s2[0]
                    if prty(q) < prty(a):
                        break
                    r += [q]
                    s2 = s2[1:]
                s2 = [a] + s2
        else:
            r += [a]
    while (s2 != []):
        q = s2[0]
        r += [q]
        s2 = s2[1:]
    return r


def prty(o):
    '''
    функция, которая принимает оператор o и возвращает его приоритет.
    Это нужно для правильного размещения операторов в RPN.
    :param o:
    :return:int
    '''
    if o == "+" or o == "-":
        return 1
    elif o == "*" or o == "/":
        return 2
    elif o == "(":
        return 0


def parse(s):
    '''
     функция, которая разбивает строку s на лексемы (цифры и операторы) и
     возвращает список лексем.
    :param s:
    :return: list
    '''
    delims = ["+", "-", "*", "/", "(", ")"]
    lex = []
    tmp = ""
    for a in s:
        if a != " ":
            if a in delims:
                if tmp != "":
                    lex += [tmp]
                lex += [a]
                tmp = ""
            else:
                tmp += a
    if tmp != "":
        lex += [tmp]
    return lex



print(rpn("(2+2) * 3"))
print(rpn("(2+2) * 3 / 34 *((2 * 2) - 4)"))
print(rpn("(2+2) * 3 / 34 *((2 * 2) - 4) * (2 + 3)"))
